uvicorn backend.app.main:app --reload

python frontend/app/ui.py


Run the Frontend:

python -m frontend.app
python -m frontend.app.ui

```python
frontend : This will host your frontend at http://localhost:9000.
```
        
Run the Frontend: 
python -m frontend.app.app
python frontend/app/entry_inventory.py

export PYTHONPATH="$PYTHONPATH:$(pwd)"
gunicorn -w 1 -b 0.0.0.0:5555 "frontend.app.app:app" --daemon
docker run -p 5555:5555 -v $(pwd):/app ims-frontend
gunicorn -w 4 -b 127.0.0.1:5555 "frontend.app.app:app" --daemon
        
######################################################################
# Docker Commands
######################################################################
docker build -t ims-frontend -f frontend/Dockerfile .
docker build -t ims-backend -f backend/Dockerfile .

docker run -d -p 8000:8000 --name ims-backend ims-backend

docker build -t ims-frontend -f frontend/Dockerfile .

docker exec -it ims-backend /bin/bash
docker exec -it ims-frontend /bin/bash 

export DISPLAY=host.docker.internal:0
xhost +localhost
docker-compose up -d

######################################################################
# ECR Commands
######################################################################
aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 891377266155.dkr.ecr.ap-south-1.amazonaws.com

2. Build your Docker image using the following command.
docker build -t tg/inventory .

2. Tag your image for ECR: 
docker tag tg/inventory:latest 891377266155.dkr.ecr.ap-south-1.amazonaws.com/tg/inventory:latest

3. Push the image to ECR
docker push 891377266155.dkr.ecr.ap-south-1.amazonaws.com/tg/inventory:latest

4. pull the image from ECR
docker pull 891377266155.dkr.ecr.ap-south-1.amazonaws.com/tg/inventory/ims-frontend:latest


5. Run the image

xhost +local:docker
docker run -it --rm \
  --network host \
  -e DISPLAY=$DISPLAY \
  -e PYTHONPATH=/app \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  tg/inventory/ims-frontend:latest python app/entry_inventory.py


On Linux:
xhost +local:docker
docker run -it --rm \
  --network host \
  -e DISPLAY=$DISPLAY \
  -e PYTHONPATH=/app \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  891377266155.dkr.ecr.ap-south-1.amazonaws.com/tg/inventory:latest \
  python app/entry_inventory.py
  

######################################################################
# ----------------------------------------------------------------------------
docker run -it \
  --env="DISPLAY" \
  --env="QT_X11_NO_MITSHM=1" \
  --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" \
  ims-frontend

######################################################################
On Linux:

xhost +local:docker
docker run -it --rm \
  --network host \
  -e DISPLAY=$DISPLAY \
  -e PYTHONPATH=/app \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  # -v $(pwd):/app \
  ims-frontend python app/entry_inventory.py

xhost +local:docker
docker run -it --rm \a
  -e DISPLAY=$DISPLAY \
  -e PYTHONPATH=/app \
  -e BACKEND_URL=http://$HOST_IP:8000 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -v $(pwd):/app \
  ims-frontend python app/entry_inventory.py

# ---------------------------------------------------------------------
On Windows (requires Xming/VcXsrv):
docker build -t ims-frontend -f frontend/Dockerfile .

docker run -it --rm \
  --network host \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e DISPLAY=host.docker.internal:0 \
  -e BACKEND_URL=http://$HOST_IP:8000 \
  -v $(pwd):/app \
  ims-frontend python app/entry_inventory.py \
  ims-frontend