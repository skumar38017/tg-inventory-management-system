services:
  postgres:
    container_name: ${POSTGRES_CONTAINER_NAME}
    image: ${POSTGRES_IMAGE}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_HTTP_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${PWD}/postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 90s
      timeout: 30s
      retries: 5
      start_period: 30s

  redis:
    container_name: ${REDIS_CONTAINER_NAME}
    image: ${REDIS_IMAGE}
    ports:
      - "${REDIS_PORT}:${REDIS_HTTP_PORT}"
    volumes:
      - ${PWD}/redis_data/redis_data:/data
      - ${PWD}/redis_data/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_USERNAME=${REDIS_USERNAME}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USERNAME}
    restart: unless-stopped
    sysctls:
      net.core.somaxconn: "65536"
    command: 
      - /bin/sh
      - -c
      - |
        # Remove vm.overcommit_memory from redis.conf to prevent warnings
        sed -i '/vm.overcommit_memory/d' /usr/local/etc/redis/redis.conf
        exec redis-server /usr/local/etc/redis/redis.conf
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "--user", "${REDIS_USER}", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    ulimits:
      nofile:
        soft: 100032
        hard: 100032
  backend:
    image: ${IMAGE_NAME}
    container_name: ${BACKEND_CONTAINER_NAME}
    ports:
      - "${BACKEND_PORT:-8000}:${BACKEND_HTTP_PORT:-8000}"
    depends_on:
      - redis
      - postgres
    env_file:
      - .env
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@${REDIS_CONTAINER_NAME}:${REDIS_HTTP_PORT}/{REDIS_DB_RESULT}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_CONTAINER_NAME}:${POSTGRES_HTTP_PORT}/${POSTGRES_DB}
    restart: unless-stopped
    volumes:
      - /backend/app/credentials/users:/app/app/credentials/users:ro 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
  redis_data: