✅ 1️⃣ Clean Project & Delete Migrations

# Delete compiled Python files and __pycache__
find . -name "*.pyc" -exec rm -f {} \;
find . -type d -name "__pycache__" -exec rm -r {} +

# Delete all migration files except __init__.py
find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
find . -path "*/migrations/*.pyc" -delete

# Delete local database (if using SQLite)
rm -f db.sqlite3

# Check Django installation path
python -c "import django; print(django.__path__)"

# Verify the migrations module exists
ls -l $(python -c "import django; print(django.__path__[0] + '/db/migrations')")

--------------------------------------------------------------------
✅ 3️⃣ Clear pip cache & Reinstall Packages

# Completely clear pip cache
pip cache purge

# Reinstall dependencies without cache
pip install --no-cache-dir --force-reinstall -r requirements.txt
--------------------------------------------------------------------


✅ 4️⃣ Recreate Alembic Migrations
# Initialize Alembic (only if not already done)
alembic init alembic

# Clear old versioned migrations
rm -rf alembic/versions/*

# Generate and apply new migrations
PYTHONPATH=./ alembic revision --autogenerate -m "Initial migration"
PYTHONPATH=./ alembic upgrade head

# Optional: If another revision is needed
alembic revision --autogenerate -m "Fix missing revision"
alembic upgrade head

# Check migration history
alembic history --verbose

# Downgrade one step (optional for testing)
alembic downgrade -1

# Clear Alembic version from DB (last resort)
psql -h localhost -p 5432 -U tg-inventory -d tg-inventory -c "DELETE FROM alembic_version;"

# Enter the PostgreSQL
psql -h localhost -p 5432 -U tg-inventory -d tg-inventory
--------------------------------------------------------------------

✅ 5️⃣ Redis Setup
# Connect to local Redis
redis-cli -h localhost -p 6379 -a Neon-Studioz-Holi-T25

# Connect to remote Redis (DB 1)
redis-cli -h 192.168.192.3 -p 6379 -a Neon-Studioz-Holi-T25 -n 1

# Flush DB 1 on remote Redis
redis-cli -h 192.168.192.3 -p 6379 -a Neon-Studioz-Holi-T25 -n 1 FLUSHDB

--------------------------------------------------------------------

✅ 6️⃣ PostgreSQL Setup

-- Connect via psql:
psql -h localhost -p 5432 -U postgres

-- Inside psql:
CREATE ROLE "tg-inventory" WITH LOGIN PASSWORD 'tg-inventory';
CREATE DATABASE "tg-inventory" OWNER "tg-inventory";
GRANT ALL PRIVILEGES ON DATABASE "tg-inventory" TO "tg-inventory";

ALTER ROLE "tg-inventory" WITH
  SUPERUSER
  CREATEDB
  CREATEROLE
  REPLICATION
  BYPASSRLS;


✅ 7️⃣ Connect to PostgreSQL Database
psql -h localhost -p 5432 -U tg-inventory -d tg-inventory

---------------------------------------------------------------
✅ 8️⃣ Run the FastAPI App with Uvicorn
export PYTHONPATH=$(pwd)
uvicorn backend.app.main:app --reload

---------------------------------------------------------------

docker run -d \
  --name backend-latest \
  -p 8000:8000 \
  --env-file app/.env \
  -v "$(pwd)app/credentials/users/office-inventory-457815-933d2b7634a8.json":ro \
  --restart unless-stopped \
  891377266155.dkr.ecr.ap-south-1.amazonaws.com/tg/inventory:backend-latest


docker rm -f backend-latest
docker run -d \
  --name backend-latest \
  -p 8000:8000 \
  --env-file app/.env \
  -v "$(pwd)/app/credentials/users/office-inventory-457815-933d2b7634a8.json:/app/credentials/users/office-inventory-457815-933d2b7634a8.json:ro" \
  --restart unless-stopped \
  891377266155.dkr.ecr.ap-south-1.amazonaws.com/tg/inventory:backend-latest
